// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User accounts from GitHub OAuth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  githubId      String?   @unique
  githubLogin   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  projects Project[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// GitHub Repository/Project being tracked
model Project {
  id          String   @id @default(cuid())
  name        String // e.g., "owner/repo"
  owner       String
  repo        String
  description String?
  url         String // GitHub URL
  homepage    String? // Project website
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String // Owner/creator of the tracking
  
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  scans Scan[]

  @@unique([owner, repo])
  @@index([userId])
  @@map("projects")
}

// Individual scan result from GitHub Action or CLI
model Scan {
  id          String    @id @default(cuid())
  projectId   String
  prNumber    Int? // PR number if from GitHub Action
  branch      String? // Branch name
  commitSha   String? // Commit SHA
  triggeredBy String? // "action" | "cli" | "webhook"
  
  // Scan results
  totalFiles       Int       @default(0)
  totalFeatures    Int       @default(0)
  blockingIssues   Int       @default(0)
  warnings         Int       @default(0)
  averageScore     Int       @default(0)
  
  // Metadata
  scanDuration     Int? // Duration in milliseconds
  targetYear       String    @default("2023")
  blockNewly       Boolean   @default(false)
  blockLimited     Boolean   @default(false)
  
  createdAt DateTime @default(now())

  project  Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  files    ScannedFile[]
  features FeatureUsage[]

  @@index([projectId])
  @@index([createdAt])
  @@map("scans")
}

// Individual file scanned in a scan
model ScannedFile {
  id           String @id @default(cuid())
  scanId       String
  filePath     String
  score        Int    @default(0)
  issuesCount  Int    @default(0)
  featuresUsed Int    @default(0)

  scan     Scan            @relation(fields: [scanId], references: [id], onDelete: Cascade)
  features FeatureUsage[]

  @@index([scanId])
  @@map("scanned_files")
}

// Web feature usage detected in scans
model FeatureUsage {
  id            String  @id @default(cuid())
  scanId        String
  fileId        String?
  featureId     String // e.g., "container-queries"
  featureName   String // e.g., "Container Queries"
  status        String // "widely" | "newly" | "limited"
  severity      String // "info" | "warning" | "error"
  message       String?
  polyfill      String? // Suggested polyfill if available

  scan Scan         @relation(fields: [scanId], references: [id], onDelete: Cascade)
  file ScannedFile? @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([scanId])
  @@index([featureId])
  @@index([status])
  @@map("feature_usage")
}

// Aggregate statistics for quick queries
model ProjectStats {
  id                String   @id @default(cuid())
  projectId         String   @unique
  totalScans        Int      @default(0)
  averageScore      Int      @default(0)
  totalFeatures     Int      @default(0)
  mostUsedFeature   String?
  lastScanAt        DateTime?
  trendDirection    String? // "improving" | "stable" | "declining"
  updatedAt         DateTime @updatedAt

  @@index([projectId])
  @@map("project_stats")
}
